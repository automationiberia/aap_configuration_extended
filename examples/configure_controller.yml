---
- name: Playbook to configure ansible Controller post installation
  hosts: localhost
  connection: local
  vars:
    controller_validate_certs: false
  # Define following vars here, or in configs/controller_auth.yml
  # controller_hostname: controller.example.com
  # controller_username: admin
  # controller_password: changeme
  collections:
    - awx.awx
    - redhat_cop.controller_configuration

  pre_tasks:

    - block:
        - name: "Check if the collection ansible.controller is installed"
          set_fact:
            ansible_controller_collection_installed: "{{ lookup('pipe', 'ansible-galaxy collection list | grep -i ansible.controllersss') }}"
      rescue:
        - name: "Check if the collection awx.awx is installed"
          set_fact:
            awx_awx_collection_installed: "{{ lookup('pipe', 'ansible-galaxy collection list | grep -i awx.awx') }}"
      always:
        - name: "Set the collection providing the controller_api lookup plugin"
          set_fact:
            controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"
        - name: "Fail if no collection is detected"
          fail:
            msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
          when: controller_api_plugin is match('NONE')
        - name: "Show the plugin we are using"
          debug:
            msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"

    - name: Wait for Controller to come up
      uri:
        url: "https://{{ controller_hostname }}/api/v2/ping"
        status_code: 200
        validate_certs: "{{ controller_validate_certs }}"
      register: result
      until: result.status == 200
      retries: 20
      delay: 30
      ignore_errors: true

    - name: Sleep for 60 seconds and allow awx to come up.
      wait_for:
        timeout: 60
      delegate_to: localhost

    - name: Include vars from configs directory
      include_vars:
        dir: ./configs
        ignore_files: [controller_config.yml.template]
        extensions: ["yml"]
      tags:
        - always

  roles:
    - dispatch  # The dispatch role calls all of the other roles.

  tasks:

    - name: Add Controller Settings Individually
      include_role:
        name: settings
      vars:
        controller_settings: "{{ controller_settings_individuale }}"

    - name: Run ad hoc commands
      include_role:
        name: ad_hoc_command
      when: controller_ad_hoc_commands is defined

    - name: Cancel Ad hoc commands
      include_tasks: "./tasks/ad_hoc_cancel.yml"
      when: controller_ad_hoc_commands is defined

    - name: Launch Controller Jobs
      include_role:
        name: job_launch
      when: controller_launch_jobs is defined

    - name: Show launched Controller jobs
      debug:
        var: launched_controller_jobs

    - name: Cancel Controller Jobs
      include_role:
        name: jobs_cancel
      vars:
        controller_cancel_jobs: "{{ launched_controller_jobs.results }}"
      when: launched_controller_jobs is defined

    - name: Launch Controller workflows
      include_role:
        name: workflow_launch
      when: controller_workflow_launch_jobs is defined

    - debug:
        var: launched_controller_workflows

    - name: Wait for workflow to finish
      job_wait:
        job_id: "{{ launched_controller_workflows.results[0].id }}"
        job_type: workflow_jobs
        timeout: 180
        controller_username:     "{{ controller_username }}"
        controller_password:     "{{ controller_password }}"
        controller_host:         "{{ controller_hostname }}"
        validate_certs:          "{{ controller_validate_certs }}"
      ignore_errors: true

    - name: Get the organization ID
      set_fact:
        controller_organization_id: "{{ lookup(controller_api_plugin, 'organizations', query_params={ 'name': 'Default' } ,host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"

    - name: "Set empty lists for testing"
      set_fact:
        controller_api_results: []
        differential_test_items: []

    - name: "Error out on empty list"
      set_fact:
        error_empty_diff: "{{ lookup('controller_object_diff', api_list=controller_api_results, compare_list=differential_test_items, warn_on_empty_api=false ) }}"
      ignore_errors: true
      register: error_results

    - name: "Warn out on empty list"
      set_fact:
        warn_empty_diff: "{{ lookup('controller_object_diff', api_list=controller_api_results, compare_list=differential_test_items ) }}"
      register: warn_results

    - name: "Assert that the empty list error correctly"
      assert:
        that:
          - error_empty_diff is not defined
          - warn_empty_diff | length == 0
          - "'Unable to find items in api_list' in error_results.msg"

    - name: Differential Testing
      include_tasks: "./tasks/differential.yml"
      loop: "{{ differential_items }}"
      loop_control:
        loop_var: differential_item
...
