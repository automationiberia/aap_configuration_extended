---
# tasks file for object_diff
- name: "Check requirements (block)"
  block:
    - name: "Check installed collections (block)"
      block:
        - name: "Check if the collection ansible.controller is installed"
          ansible.builtin.set_fact:
            ansible_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i ansible.controller || echo NOTINSTALLED') }}"
          failed_when: ansible_controller_collection_installed is match('NOTINSTALLED')
      rescue:
        - name: "Check if the collection awx.awx is installed"
          ansible.builtin.set_fact:
            awx_awx_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i awx.awx || echo NOTINSTALLED') }}"
          failed_when: awx_awx_collection_installed is match('NOTINSTALLED')
      always:
        - name: "Set the collection providing the controller_api lookup plugin"
          ansible.builtin.set_fact:
            controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"
        - name: "Fail if no collection is detected"
          ansible.builtin.fail:
            msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
          when: controller_api_plugin is match('NONE')
        - name: "Show the plugin we are using"
          ansible.builtin.debug:
            msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"
  tags:
    - always

- name: "Setup authentication (block)"
  block:
    - name: "Get the Authentication Token for the future requests"
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}/api/v2/tokens/"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: POST
        force_basic_auth: true
        validate_certs: "{{ controller_validate_certs }}"
        status_code: 201
      register: authtoken_res

    - name: "Set the oauth token to be used since now"
      ansible.builtin.set_fact:
        controller_oauthtoken: "{{ authtoken_res.json.token }}"
        controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
  no_log: "{{ controller_configuration_object_diff_secure_logging }}"
  when: controller_oauthtoken is not defined
  tags:
    - always

- name: "Include Tasks to get OBJECT DIFF {{  __task_diff.name }}"
  ansible.builtin.include_tasks: "{{  __task_diff.name }}.yml"
  args:
    apply:
      tags: "{{  __task_diff.tags }}"
  tags: always
  loop: "{{ controller_configuration_object_diff_tasks }}"
  loop_control:
    loop_var: __task_diff

- name: "Delete the Authentication Token used"
  ansible.builtin.uri:
    url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
    user: "{{ controller_username }}"
    password: "{{ controller_password }}"
    method: DELETE
    force_basic_auth: true
    validate_certs: "{{ controller_validate_certs }}"
    status_code: 204
  when: controller_oauthtoken_url is defined
...
